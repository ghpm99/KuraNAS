name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  BUILD_DIR: build
  FRONTEND_DIR: frontend
  BACKEND_DIR: backend
  DIST_DIR: frontend/dist

jobs:
  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: yarn install --frozen-lockfile
      - run: yarn lint

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: yarn install --frozen-lockfile
      - run: yarn test --if-present

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go fmt ./...
      - run: go vet ./...

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go test ./...

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows]

    name: Build for ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn install --frozen-lockfile

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn build

      - name: Build Go backend for ${{ matrix.os }}
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.os == 'windows' && 'windows' || 'linux' }}
          GOARCH: amd64
        run: |
          go build -o kuranas ./cmd/nas/main.go

      - name: Prepare build directory
        run: |
          mkdir -p $BUILD_DIR/dist
          cp -r $DIST_DIR $BUILD_DIR/
          cp $BACKEND_DIR/kuranas* $BUILD_DIR/
          cp -r $BACKEND_DIR/icons $BUILD_DIR/
          cp -r $BACKEND_DIR/translations $BUILD_DIR/

      - name: Archive build folder
        run: |
          zip -r kuranas-${{ matrix.os }}.zip $BUILD_DIR

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: kuranas-${{ matrix.os }}
          path: kuranas-${{ matrix.os }}.zip

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: kuranas-*
          merge-multiple: true

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.sha }}
          tag_name: release-${{ github.run_number }}
          files: |
            kuranas-linux.zip
            kuranas-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
