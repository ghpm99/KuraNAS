name: CI/CD

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  BUILD_DIR: build
  FRONTEND_DIR: frontend
  BACKEND_DIR: backend
  DIST_DIR: frontend/dist

jobs:
  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: yarn install --frozen-lockfile
      - run: yarn lint

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: lint-frontend
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: yarn install --frozen-lockfile
      - run: yarn test --if-present

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go fmt ./...
      - run: go vet ./...

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: lint-backend
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go test ./...

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn install --frozen-lockfile

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        env:
          VITE_API_URL: ''
        run: yarn build

      - name: Build Go backend (Linux)
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -ldflags "-X 'api.Version=${{ github.ref_name }}' -X 'api.CommitHash=${{ github.sha }}'" -tags=linux -o kuranas ./cmd/nas/main.go

      - name: Prepare build directory
        run: |
          mkdir -p $BUILD_DIR/dist
          cp -r $DIST_DIR $BUILD_DIR/
          cp $BACKEND_DIR/kuranas $BUILD_DIR/
          cp -r $BACKEND_DIR/icons $BUILD_DIR/
          cp -r $BACKEND_DIR/translations $BUILD_DIR/

      - name: Archive build (Linux)
        run: zip -r kuranas-linux.zip $BUILD_DIR

      - name: Upload artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: kuranas-linux
          path: kuranas-linux.zip

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install frontend dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_URL: ''
        run: yarn build

      - name: Build Go backend (Windows)
        working-directory: backend
        env:
          CGO_ENABLED: 1
          GOOS: windows
          GOARCH: amd64
        run: go build -ldflags "-X 'api.Version=${{ github.ref_name }}' -X 'api.CommitHash=${{ github.sha }}'" -tags=windows -o kuranas.exe ./cmd/nas/main.go

      - name: Prepare build directory
        shell: bash
        run: |
          mkdir -p $BUILD_DIR/dist
          cp -r $DIST_DIR $BUILD_DIR/
          cp backend/kuranas.exe $BUILD_DIR/
          cp -r backend/icons $BUILD_DIR/
          cp -r backend/translations $BUILD_DIR/

      - name: Archive build (Windows)
        run: Compress-Archive -Path $env:BUILD_DIR\* -DestinationPath kuranas-windows.zip

      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: kuranas-windows
          path: kuranas-windows.zip

  release:
    name: Release build artifacts
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: kuranas-*
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: |
            kuranas-linux.zip
            kuranas-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
